<?php

namespace AppBundle\Repository;

use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
	/**
	 * @param string $username
	 * @return \Symfony\Component\Security\Core\User\UserInterface
	 */
	public function loadUserByUsername($username)
	{
		return $this->createQueryBuilder('u')
			->where('u.username = :username')
			->setParameter('username', $username)
			->getQuery()
			->getOneOrNullResult();
	}

	/**
	 * @param \AppBundle\Entity\User $user
	 * @return \AppBundle\Entity\User[]
	 */
	public function findAllowedUsers(\AppBundle\Entity\User $user)
	{
		$qb = $this->createQueryBuilder('u');

		$notRoles = [];

		## if user just has admin role and not
		if (!$user->hasSuperAdminRole()) {
			$notRoles = ['ROLE_SUPER_ADMIN'];
		}

		## if user just has admin role and not
		if (!$user->hasAdminRole()) {
			$notRoles = ['ROLE_ADMIN'];
		}

		if ($notRoles) {
			$qb->innerJoin('AppBundle\Entity\UserRole', 'ur', 'WITH', 'u = ur.user')
				->innerJoin('AppBundle\Entity\Role', 'r', 'WITH', 'r = ur.role')
				->where($qb->expr()->notIn('r.role', ':roles'))
				->setParameter('roles', $notRoles);
		}

		return $qb->getQuery()
			->getResult();
	}
}
